#!/usr/bin/env python3

import json
import os
import subprocess
import sys
from typing import Dict, List, Any

def generate_tab_title(tab_data: Dict[str, Any]) -> str:
    """Generate a title for a tab based on its buffer contents."""
    
    # Extract meaningful context from tab data
    context_parts = []
    
    # Add filenames if available
    files = tab_data.get('files', [])
    if files:
        # Get base names of files, prioritize non-hidden files
        visible_files = [f for f in files if not os.path.basename(f).startswith('.')]
        if visible_files:
            files_to_show = visible_files[:2]  # Show max 2 files
        else:
            files_to_show = files[:2]
        
        file_names = [os.path.basename(f) for f in files_to_show]
        context_parts.append(f"files: {', '.join(file_names)}")
    
    # Add content snippets
    content = tab_data.get('content', '')
    if content:
        # Clean and truncate content
        clean_content = content.replace('\n', ' ').strip()[:200]
        if clean_content:
            context_parts.append(f"content: {clean_content}")
    
    # Add terminal info if present
    if tab_data.get('has_terminal'):
        context_parts.append("terminal session")
    
    # Construct context string
    if not context_parts:
        return "coding session"
    
    context = " | ".join(context_parts)
    
    # Generate title using Claude
    prompt = f'''Generate a concise tab title for a Neovim tab. Context: {context}

Requirements:
- MAXIMUM 3-5 words
- MAXIMUM 25 characters total
- Focus on the main activity/project theme
- Use lowercase with spaces
- Examples: "nvim config", "python analysis", "web api", "react components"
- NO quotes, explanations, or extra text
- ONLY return the title, nothing else'''

    try:
        result = subprocess.run(
            ['claude', '-p', '--model', 'claude-3.5-haiku', prompt],
            capture_output=True,
            text=True,
            timeout=15
        )
        
        if result.returncode == 0 and result.stdout:
            title = result.stdout.strip().split('\n')[0]  # First line only
            title = title.strip('"\'')  # Remove quotes
            
            # Validate title length
            if len(title) <= 25 and title:
                return title
                
    except (subprocess.TimeoutExpired, subprocess.SubprocessError, FileNotFoundError):
        pass
    
    # Fallback: generate simple title from context
    return generate_fallback_title(context_parts)

def generate_fallback_title(context_parts: List[str]) -> str:
    """Generate a simple fallback title."""
    if not context_parts:
        return "tab"
    
    # Extract key words from context
    key_words = []
    for part in context_parts:
        if "files:" in part:
            # Extract file extensions or names
            files_part = part.split("files: ", 1)[1]
            for file_name in files_part.split(", "):
                if "." in file_name:
                    ext = file_name.split(".")[-1].lower()
                    if ext in ["py", "js", "ts", "lua", "go", "rs", "java", "cpp", "c"]:
                        key_words.append(ext)
                    elif ext in ["md", "txt", "json", "yaml", "yml"]:
                        key_words.append("config" if ext in ["json", "yaml", "yml"] else ext)
                else:
                    # Use first part of filename
                    name_part = file_name.lower().replace("-", " ").replace("_", " ")
                    key_words.extend(name_part.split()[:1])
        elif "terminal" in part:
            key_words.append("terminal")
    
    if key_words:
        # Take first 2-3 meaningful words
        title = " ".join(key_words[:2])
        return title if len(title) <= 25 else key_words[0]
    
    return "tab"

def main():
    """Main entry point."""
    try:
        # Read JSON input from stdin
        input_data = json.loads(sys.stdin.read())
        
        # Generate title
        title = generate_tab_title(input_data)
        
        # Output just the title
        print(title)
        
    except (json.JSONDecodeError, KeyError, Exception):
        # Silent fallback
        print("tab")

if __name__ == '__main__':
    main()