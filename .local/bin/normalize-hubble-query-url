#!/usr/bin/env python3
"""
Normalize Hubble query URLs - handles saved queries, permalinks, and IDs.
Uses only stdlib to make requests and parse responses.
"""

import subprocess
import json
import sys
import urllib.parse
import re


def run_sc_curl(url):
    """Run sc-curl command and return the response."""
    try:
        result = subprocess.run(
            ['sc-curl', url],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error running sc-curl: {e}", file=sys.stderr)
        print(f"stderr: {e.stderr}", file=sys.stderr)
        return None
    except FileNotFoundError:
        print("Error: sc-curl not found. Make sure it's installed and in PATH.", file=sys.stderr)
        return None


def is_uuid(value):
    """Check if a string is a UUID format."""
    uuid_pattern = re.compile(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', re.IGNORECASE)
    return bool(uuid_pattern.match(value))


def is_short_id(value):
    """Check if a string is a short alphanumeric ID (like 6aaacbbf)."""
    short_id_pattern = re.compile(r'^[0-9a-f]{8}$', re.IGNORECASE)
    return bool(short_id_pattern.match(value))


def extract_id_from_url(url):
    """Extract ID from various Hubble URL formats."""
    # Remove query parameters and fragments
    clean_url = url.split('?')[0].split('#')[0]
    
    # Extract from saved query URL
    if '/saved-queries/' in clean_url:
        return clean_url.split('/saved-queries/')[-1], 'saved_query'
    
    # Extract from template URL
    if '/templates/' in clean_url:
        return clean_url.split('/templates/')[-1], 'template'
    
    # Extract from permalink URL (handles both /queries/stripe/ and /queries/username/)
    if '/queries/' in clean_url:
        parts = clean_url.split('/queries/')[-1].split('/')
        if len(parts) >= 2:
            return parts[-1], 'permalink'  # Get the last part (the actual ID)
    
    return None, None


def convert_saved_query_to_permalink(saved_query_id):
    """Convert saved query ID to permalink URL."""
    # Build TRPC API URL
    input_data = {"json": {"id": saved_query_id}}
    encoded_input = urllib.parse.quote(json.dumps(input_data))
    api_url = f"https://hubble.corp.stripe.com/api/trpc/hubble.savedQueries.get?input={encoded_input}"
    
    # Fetch JSON response
    response = run_sc_curl(api_url)
    if not response:
        return None
    
    # Extract execution ID from JSON
    try:
        data = json.loads(response)
        execution_id = data.get('result', {}).get('data', {}).get('json', {}).get('activeVersion', {}).get('hubbleQueryId')
        if execution_id:
            return f"https://hubble.corp.stripe.com/queries/stripe/{execution_id}"
    except (json.JSONDecodeError, AttributeError, KeyError):
        pass
    
    return None


def handle_template_query(template_id):
    """Handle template query URLs - they don't need conversion, just pass through."""
    # Template queries are self-contained and don't need conversion to permalinks
    # They represent parameterized queries that can be executed with different inputs
    return f"https://hubble.corp.stripe.com/templates/{template_id}"


def normalize_hubble_url(input_value):
    """Normalize various Hubble URL formats to permalink URLs."""
    # Handle direct URLs
    if input_value.startswith('https://'):
        extracted_id, url_type = extract_id_from_url(input_value)
        
        if url_type == 'permalink':
            # Already a permalink, return as-is
            return input_value
        elif url_type == 'saved_query':
            # Convert saved query to permalink
            return convert_saved_query_to_permalink(extracted_id)
        elif url_type == 'template':
            # Template query, return as-is (they don't convert to permalinks)
            return handle_template_query(extracted_id)
        else:
            print(f"Error: Unrecognized Hubble URL format: {input_value}", file=sys.stderr)
            return None
    
    # Handle bare IDs
    if is_uuid(input_value):
        # UUID format - assume it's a saved query ID
        return convert_saved_query_to_permalink(input_value)
    elif is_short_id(input_value):
        # Short ID format - assume it's a permalink ID
        return f"https://hubble.corp.stripe.com/queries/stripe/{input_value}"
    else:
        print(f"Error: Unrecognized ID format: {input_value}", file=sys.stderr)
        return None


def print_help():
    """Print help message."""
    help_text = """
normalize-hubble-query-url - normalize hubble urls and ids to canonical format

USAGE:
    normalize-hubble-query-url <input>
    normalize-hubble-query-url [--help|-h]

DESCRIPTION:
    Normalizes various Hubble query formats to canonical URLs. Handles:
    - Saved query URLs and UUIDs (converts to permalink)
    - Permalink URLs (passes through unchanged)
    - Template URLs (passes through unchanged)
    - Short permalink IDs (formats to full URL)
    
    Requires sc-curl to be installed for saved query conversion.

INPUT FORMATS:
    Saved query URL:  https://hubble.corp.stripe.com/saved-queries/<uuid>
    Saved query UUID: <uuid> (e.g., 12345678-1234-1234-1234-123456789abc)
    Permalink URL:    https://hubble.corp.stripe.com/queries/stripe/<short_id>
    Permalink ID:     <short_id> (e.g., 6aaacbbf)
    Template URL:     https://hubble.corp.stripe.com/templates/<template_id>

OUTPUT FORMATS:
    Permalinks:  https://hubble.corp.stripe.com/queries/stripe/<execution_id>
    Templates:   https://hubble.corp.stripe.com/templates/<template_id>

EXAMPLES:
    normalize-hubble-query-url https://hubble.corp.stripe.com/saved-queries/12345678-1234-1234-1234-123456789abc
    normalize-hubble-query-url 12345678-1234-1234-1234-123456789abc
    normalize-hubble-query-url https://hubble.corp.stripe.com/queries/stripe/6aaacbbf
    normalize-hubble-query-url 6aaacbbf
    normalize-hubble-query-url https://hubble.corp.stripe.com/templates/14016

DEPENDENCIES:
    sc-curl - required for saved query conversion
"""
    print(help_text.strip())


def main():
    """Main function to handle command line usage."""
    if len(sys.argv) != 2:
        print("Usage: normalize-hubble-query-url <input>", file=sys.stderr)
        print("Use --help or -h for detailed help", file=sys.stderr)
        sys.exit(1)
    
    if sys.argv[1] in ['--help', '-h']:
        print_help()
        sys.exit(0)
    
    result = normalize_hubble_url(sys.argv[1])
    if result:
        print(result)
    else:
        sys.exit(1)


if __name__ == '__main__':
    main()