#!/usr/bin/env python3
"""
scpaste - Transfer clipboard content to remote hosts via SSH control sockets.

Finds all open SSH control sockets and transfers clipboard content to all connected remote hosts.
"""

import os
import stat
import sys
import subprocess
import tempfile
from typing import List, Dict, Set, Optional, Union


def resolve_socket_path(original_path: str) -> Optional[str]:
    """Resolve socket path using smart fallback logic.

    1. Check if original path exists
    2. If not, find longest matching path in same directory
    """
    # If original path exists, use it
    if os.path.exists(original_path):
        return original_path

    # Extract directory and filename
    directory = os.path.dirname(original_path)
    if not directory or not os.path.exists(directory):
        return None

    # Find all files in directory
    try:
        files_in_dir = os.listdir(directory)
    except (OSError, PermissionError):
        return None

    original_filename = os.path.basename(original_path)
    # Sort filenames by length (descending) to prefer longer matches
    files_in_dir.sort(key=len, reverse=True)

    for filename in files_in_dir:
        if not original_filename.startswith(filename):
            continue
        candidate_path = os.path.join(directory, filename)

        try:
            file_stat = os.stat(candidate_path)
        except (OSError, PermissionError):
            continue
        if not stat.S_ISSOCK(file_stat.st_mode):
            continue
        return candidate_path

    return None


def parse_lsof(stdout):
    record = {}

    for line in stdout.strip().split("\n"):
        if not line:
            continue

        field_type = line[0]
        field_value = line[1:]

        if field_type == "p":
            # New process record
            record = {"pid": field_value}
        elif field_type == "c":
            record["command"] = field_value
        elif field_type == "t":
            record["type"] = field_value
        elif field_type == "n":
            record["path"] = field_value
            yield record

    if record:
        yield record


def find_ssh_sockets() -> Set[str]:
    """Find all SSH control sockets using lsof."""
    try:
        result = subprocess.run(
            ["lsof", "-U", "-F", "pcnt"],
            capture_output=True,
            text=True,
            timeout=10,
            check=True,
        )
    except subprocess.CalledProcessError:
        return set()

    records = parse_lsof(result.stdout)
    sockets = set(
        resolve_socket_path(x["path"])
        for x in records
        if x["command"] == "ssh" and x["type"] == "unix" and x["path"].startswith("/")
    )

    return sockets


def get_clipboard_class(cls):
    got = subprocess.run(
        [
            "osascript",
            "-e",
            f'tell application "System Events" to get the clipboard as «class {cls}»',
        ],
        capture_output=True,
        text=True,
    )
    if got.returncode != 0:
        return None

    data = got.stdout.strip()
    if cls == "utf8":
        return data.encode("utf-8")

    try:
        return bytes.fromhex(data.lstrip("«data " + cls).rstrip("»"))
    except ValueError:
        return None


def get_clipboard_content() -> Dict[str, bytes]:
    """Get clipboard content in all available formats."""
    # Get clipboard info to see what formats are available
    try:
        info_result = subprocess.run(
            ["osascript", "-e", 'tell application "System Events" to clipboard info'],
            capture_output=True,
            text=True,
        )
        if info_result.returncode != 0:
            return {}
    except Exception:
        return {}

    clipboard_info = info_result.stdout.strip()
    formats = {
        "PNGf": None,
        "HTML": None,
        "GIF": None,
        "PDF": None,
        "utf8": None,
    }
    extensions = {
        "PNGf": "png",
        "HTML": "html",
        "GIF": "gif",
        "PDF": "pdf",
        "utf8": "txt",
    }

    for format in formats:
        if f"«class {format}»" not in clipboard_info:
            continue
        formats[format] = get_clipboard_class(format)

    # Remove any None values and convert to extension
    return {extensions[k]: v for k, v in formats.items() if v is not None}


def transfer_to_hosts(
    sockets: Set[str], clipboard_content: Dict[str, bytes], prefix: str = "~/"
) -> List[str]:
    """Transfer clipboard content to remote hosts via SSH sockets."""
    if not clipboard_content or not sockets:
        return []

    all_created_files = []

    for socket_path in sockets:
        created_files = []

        with tempfile.TemporaryDirectory() as temp_dir:
            for ext, content in clipboard_content.items():
                if not content:
                    continue

                filename = f"{prefix}paste.{ext}"
                temp_file_path = os.path.join(temp_dir, f"paste.{ext}")

                # Write content to temp file - everything is bytes now
                try:
                    with open(temp_file_path, "wb") as f:
                        f.write(content)
                except Exception:
                    continue  # Skip this format on error

                # Transfer via scp
                scp_cmd = [
                    "scp",
                    "-o",
                    f"ControlPath={socket_path}",
                    temp_file_path,
                    f"dummy:{filename}",
                ]

                try:
                    subprocess.run(scp_cmd, capture_output=True, text=True, check=True)
                    created_files.append(filename)
                except subprocess.CalledProcessError:
                    continue  # Skip this file on transfer error

        if created_files:
            print(f"✅ Created {len(created_files)} files via {socket_path}:")
            for file in created_files:
                print(f"   📄 {file}")
            all_created_files.extend(created_files)

    return all_created_files


def main() -> int:
    """Main function."""
    # Get prefix from command line argument, default to ~/
    prefix = sys.argv[1] if len(sys.argv) > 1 else "~/"

    # Ensure prefix ends with / if it doesn't already
    if prefix and not prefix.endswith("/"):
        prefix += "/"

    # Find all SSH sockets
    sockets = find_ssh_sockets()
    if not sockets:
        print("❌ No SSH control sockets found")
        return 1

    print(f"🔌 Found {len(sockets)} SSH control sockets")

    # Get clipboard content
    clipboard_content = get_clipboard_content()
    if not clipboard_content:
        print("❌ No clipboard content found")
        return 1

    print(f"📋 Found clipboard formats: {', '.join(clipboard_content.keys())}")

    # Transfer to all remote hosts
    created_files = transfer_to_hosts(sockets, clipboard_content, prefix)

    if created_files:
        print(
            f"🎉 Successfully created {len(created_files)} files across {len(sockets)} hosts"
        )
    else:
        print("❌ No files were created")

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n❌ Interrupted")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Unexpected error: {e}")
        sys.exit(1)
