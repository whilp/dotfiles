#!/usr/bin/env luajit
-- Get hostname or box-name/host_env identifier

local ffi = require('ffi')

ffi.cdef[[
  typedef struct DIR DIR;
  typedef struct dirent {
    uint64_t d_ino;
    int64_t d_off;
    unsigned short d_reclen;
    unsigned char d_type;
    char d_name[256];
  } dirent;

  DIR *opendir(const char *name);
  dirent *readdir(DIR *dirp);
  int closedir(DIR *dirp);
  int access(const char *pathname, int mode);
]]

local C = ffi.C
local F_OK = 0

-- Function to trim whitespace
local function trim(s)
  return s:match('^%s*(.-)%s*$')
end

-- Function to read file contents
local function read_file(path)
  local file = io.open(path, 'r')
  if not file then
    return nil
  end
  local content = file:read('*l')
  file:close()
  return content and trim(content) or nil
end

-- Function to check if file exists
local function file_exists(path)
  return C.access(path, F_OK) == 0
end

-- Function to glob for /*/conf/box-name
local function find_box_name()
  local dir = C.opendir('/')
  if dir == nil then
    return nil
  end

  while true do
    local entry = C.readdir(dir)
    if entry == nil then
      break
    end

    local name = ffi.string(entry.d_name)
    if name ~= '.' and name ~= '..' then
      local path = '/' .. name .. '/conf/box-name'
      if file_exists(path) then
        C.closedir(dir)
        return path
      end
    end
  end

  C.closedir(dir)
  return nil
end

local identifier = ''

-- Try to find and read /*/conf/box-name
local box_name_path = find_box_name()
if box_name_path then
  local box_name = read_file(box_name_path)
  if box_name and box_name ~= '' then
    identifier = box_name

    -- Try to append host_env
    local conf_dir = box_name_path:match('(.*)/box%-name$')
    if conf_dir then
      local env = read_file(conf_dir .. '/host_env')
      if env and env ~= '' then
        identifier = identifier .. '/' .. env
      end
    end
  end
end

-- Fall back to short hostname
if identifier == '' then
  local handle = io.popen('hostname -s 2>/dev/null || hostname')
  if handle then
    local hostname = handle:read('*l')
    handle:close()
    if hostname then
      identifier = hostname:match('([^.]+)')
    end
  end
end

print(identifier)
