load(":debs.bzl", "image_package_files")
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
)
load("@subpar//:subpar.bzl", "par_binary")
load("@python//:requirements.bzl", "requirement")
load("@io_bazel_rules_docker//python3:image.bzl", "py3_image")

# NOTE: :image must be built/run separately. We cannot use it
# as data here because this target is expected to be built/run
# in OSX. clipper should be built for OSX and various parts of the
# image (namely nvim) are a PITA to build/extract on OSX.
sh_binary(
    name = "run",
    srcs = ["run.sh"],
    args = [
        "$(location @com_github_wincent_clipper//:clipper)",
    ],
    data = [
        "@com_github_wincent_clipper//:clipper",
    ],
)

container_image(
    name = "image",
    base = "@ubuntu//image",
    cmd = [
        "/usr/sbin/sshd",
        "-D",
    ],
    debs = image_package_files() + ["@docker//file"],
    env = {
        "HOME": "/home/me",
    },
    # Force rebuild when we observe new packages.
    files = ["//image:debs.bzl"],
    ports = ["22"],
    tars = [
        "//home:tar",
        ":etc",
        ":usr_bin",
        ":usr_local",
        ":slash",
    ],
    workdir = "/home/me",
)

pkg_tar(
    name = "slash",
    files = {
        ":empty": "/run/sshd/.keep",
    },
    package_dir = "/",
)

pkg_tar(
    name = "etc",
    files = {
        "@cacert//file": "./ssl/certs/ca-certificates.crt",
        # https://bugs.launchpad.net/ubuntu/+source/apt/+bug/1577926
        "apt.conf": "./apt/apt.conf",
        "sshd_config": "./ssh/sshd_config",
        ":host": "./ssh/ssh_host_rsa_key",
        ":user.pub": "./ssh/authorized_keys",
        "passwd": "./passwd",
        "group": "./group",
    },
    modes = {
        "./ssh/ssh_host_rsa_key": "0400",
    },
    package_dir = "/etc",
)

pkg_tar(
    name = "usr_bin",
    srcs = [
        "@fzf",
        "@ripgrep//:rg",
        "@shellcheck",
    ],
    files = {
        "@bazel//file": "bazel",
        "@shfmt//file": "shfmt",
        "@org_golang_x_tools//cmd/goimports": "goimports",
        "@com_github_jstemmer_gotags//:gotags": "gotags",
        "@com_github_nsf_gocode//:gocode": "gocode",
        "@com_github_josharian_impl//:impl": "impl",
        "@com_github_derekparker_delve//cmd/dlv": "dlv",
        "@com_github_kisielk_errcheck//:errcheck": "errcheck",
        "@com_github_fatih_motion//:motion": "motion",
        "@com_github_rogpeppe_godef//:godef": "godef",
        "@com_github_davidrjenni_reftools//cmd/fillstruct": "fillstruct",
        "@org_golang_x_lint//golint": "golint",
        "@com_github_zmb3_gogetdoc//:gogetdoc": "gogetdoc",
        "@com_github_bazelbuild_buildtools//buildifier": "buildifier",
        "@com_github_bazelbuild_buildtools//buildozer": "buildozer",
        # TODO
        #"@com_github_bazelbuild_bazel_watcher//ibazel": "ibazel",
        "@bazel_gazelle//cmd/gazelle": "gazelle",
        "@com_github_shurcooL_markdownfmt//:markdownfmt": "markdownfmt",
        ":black.par": "black",
        ":flake8.par": "flake8",
    },
    mode = "0755",
    package_dir = "/usr/bin",
    symlinks = {
        "./usr/bin/python": "python3.6",
        "./bin/nc": "nc.openbsd",
    },
)

pkg_tar(
    name = "usr_local",
    package_dir = "/usr/local",
    symlinks = {
        "./usr/local/bin/nvim": "../nvim-linux64/bin/nvim",
        "./usr/local/bin/go": "../go/bin/go",
        "./usr/local/bin/godoc": "../go/bin/godoc",
        "./usr/local/bin/gofmt": "../go/bin/gofmt",
    },
    deps = [
        "@nvim//file",
        "@org_golang_go//file",
        "@org_llvm_clang//:tar",
    ],
)

par_binary(
    name = "flake8",
    srcs = ["flake8.py"],
    deps = [
        requirement("flake8"),
        requirement("pyflakes"),
        requirement("pycodestyle"),
        requirement("mccabe"),
        requirement("setuptools"),
        requirement("configparser"),
    ],
)

par_binary(
    name = "black",
    srcs = ["black.py"],
    zip_safe = False,
    deps = [
        requirement("black"),
        requirement("click"),
        requirement("attrs"),
        requirement("appdirs"),
        requirement("toml"),
    ],
)

genrule(
    name = "hostkey",
    outs = [
        "host",
        "host.pub",
    ],
    cmd = "ssh-keygen -q -h -f $(location :host) 2>/dev/null",
    visibility = ["//visibility:public"],
)

genrule(
    name = "userkey",
    outs = [
        "user",
        "user.pub",
    ],
    cmd = "ssh-keygen -q -f $(location :user) 2> /dev/null",
    visibility = ["//visibility:public"],
)
